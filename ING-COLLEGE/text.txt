import javax.swing.*;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import javax.swing.JButton;
import java.awt.Font;
import javax.swing.JTextField;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.BorderFactory;

public class INGCollege
{
    private JFrame frame;
    private JPanel panel1, panel2;
    private JLabel lbCourse, lbCourseName,lbAcademic,lbLevel,lbCourseLeader, lbCredit, lbDuration,lbNumberofAssessment,lbStartingDate,lbComplete,
    lbNone,lbPrerequitise,lbInstructor,lbLecturerName,lbExamDate;
    private JTextField txtCourseID,txtacaCourseID,txtNonCourseID,txtNon1CourseID, txtCourseLeader,txtLecturerName,txtClearAcademic, 
    txtCourseName,txtNonCourseName,txtLevel,txtCredit,txtNumberofAssessment,txtNonDuration,txtDuration,txtStartingDate,
    txtCompletionDate,txtPrerequitise,txtInstructor,txtNonCompletionDate,txtNonExamDate,txtNon2CourseID,txtNonStartingDate,txtNonCourseLeader;
    
    
    private JButton btnAddAcademic,btnAddDisplayAcademic,btnClearAcademic,btnRegister,btnAddNonAcademic,btnDisplayNonAcademic,btnRemoveNonAcademic,
    btnClearNonAcademic,
    btnRegisterNonAcademic;

    private ArrayList<Course> courses= new ArrayList<Course> ();

    public INGCollege(){
        initialFrame();
        myFrameA();
        myFrameB();
        frame.setVisible(true);
    }

    public String gettxtCourseID(){
        return txtCourseID.getText();
    }

    public String gettxtAcaCourseID(){
        return txtacaCourseID.getText();
    }

    public String gettxtNonCourseID(){
        return txtNonCourseID.getText();
    }

    public String gettxtNon1CourseID(){
        return txtNon1CourseID.getText();
    }

    public String gettxtCourseLeader(){
        return txtCourseLeader.getText();
    }

    public String gettxtCourseName(){
        return txtCourseName.getText();
    }

    public String gettxtNonCourseName(){
        return txtNonCourseName.getText();
    }

    public String gettxtLevel(){
        return txtLevel.getText();
    }

    public String gettxtLecturerName(){
        return txtLecturerName.getText();
    }

    public String gettxtCredit(){
        return txtCredit.getText();
    }

    public int gettxtDuration(){
        String Duration = txtDuration.getText();
        int DurationNum = -1;
        try{
            DurationNum = Integer.parseInt(Duration);
        }catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(frame,"Incorrect value for Duration .\nPlease add numeric value","Invalid Input",0);
        }
        return DurationNum;
    }

    public int gettxtNonDuration(){
        String Duration = txtNonDuration.getText();
        int DurationNum = -1;
        try{
            DurationNum = Integer.parseInt(Duration);
        }catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(frame,"Incorrect value for Duration .\nPlease add numeric value","Invalid Input",0);
        }
        return DurationNum;
    }

    public int gettxtNumberofAssessment(){
        String NumberofAssessment = txtNumberofAssessment.getText();
        int NumberofAssessmentNum = -1;
        try{
            NumberofAssessmentNum = Integer.parseInt(NumberofAssessment);
        }catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(frame,"Incorrect value for numberofassessment.\nPlease add numeric value","Invalid Input",0);
        }
        return NumberofAssessmentNum;
    }

    public String gettxtStartingDate(){
        return txtStartingDate.getText();

    }

    public String gettxtCompletionDate(){
        return txtCompletionDate.getText();
    }

    public String gettxtPrerequitise(){
        return txtPrerequitise.getText();
    }

    public String gettxtInstructor(){
        return txtInstructor.getText();
    }

    public void initialFrame(){
        frame = new JFrame("CourseRegistration");
        frame.setLayout(null);
        frame.setSize(1100,1100);
        frame.setResizable(false);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        panel1 = new JPanel(); 
        frame.add(panel1);
        panel1.setBounds(0,0,550,790);
        panel1.setLayout(null);
        panel1.setBackground(Color.GRAY);
        panel1.setBorder(BorderFactory.createLineBorder(Color.BLUE));

        panel2 = new JPanel();
        frame.add(panel2);
        panel2.setBounds(250,0,850,800);
        panel2.setLayout(null);
        panel2.setBackground(Color.GRAY);
        panel2.setBorder(BorderFactory.createLineBorder(Color.BLUE));

    }

    public void myFrameA(){
        lbAcademic= new JLabel("ACADEMIC COURSE");
        panel1.add(lbAcademic);
        lbAcademic.setBounds(220,12,125,30);
        lbAcademic.setFont(new Font("Verdana",Font.PLAIN,16));

        lbCourse = new JLabel("CourseID:");
        panel1.add(lbCourse);
        lbCourse.setBounds(14,100,125,30);

        txtCourseID = new JTextField();
        panel1.add(txtCourseID);
        txtCourseID.setBounds(80,100,150,35);

        lbCourse = new JLabel("Course Name:");
        panel1.add(lbCourse);
        lbCourse.setBounds(275,100,129,35);

        txtCourseName = new JTextField();
        panel1.add(txtCourseName);
        txtCourseName.setBounds(360,100,170,35);

        lbLevel = new JLabel("Level:");
        panel1.add(lbLevel);
        lbLevel.setBounds(15,150,200,30);

        txtLevel = new JTextField();
        panel1.add(txtLevel);
        txtLevel.setBounds(77,150,155,35);

        lbCredit = new JLabel("Credit:");
        panel1.add(lbCredit);
        lbCredit.setBounds(300,150,125,35);

        txtCredit = new JTextField();
        panel1.add(txtCredit);
        txtCredit.setBounds(360,150,175,35);

        lbDuration = new JLabel("Duration:");
        panel1.add(lbDuration);
        lbDuration.setBounds(15,200,125,30);

        txtDuration = new JTextField();
        panel1.add(txtDuration);
        txtDuration.setBounds(77,200,155,35);

        lbNumberofAssessment = new JLabel("NumberofAsessment:");
        panel1.add(lbNumberofAssessment);
        lbNumberofAssessment.setBounds(240,200,125,30);

        txtNumberofAssessment= new JTextField();
        panel1.add(txtNumberofAssessment);
        txtNumberofAssessment.setBounds(370,200,163,35);

        JButton btnAddAcademic=new JButton("Add");
        btnAddAcademic.setBounds(200,270,150,40);
        panel1.add(btnAddAcademic);
        btnAddAcademic.addActionListener(new ActionListener()
            {
                public void actionPerformed(ActionEvent ae){
                    addAcademicCourse();
                }
            });

        lbCourse=new JLabel("Course ID:");
        panel1.add(lbCourse);
        lbCourse.setBounds(15,330,185,30);

        txtacaCourseID=new JTextField();
        panel1.add(txtacaCourseID);
        txtacaCourseID.setBounds(75,330,185,40);

        lbCourseLeader=new JLabel("CourseLeader:");
        panel1.add(lbCourseLeader);
        lbCourseLeader.setBounds(10,390,125,30);

        txtCourseLeader=new JTextField();
        panel1.add(txtCourseLeader);
        txtCourseLeader.setBounds(100,390,165,30);

        lbStartingDate= new JLabel("StartingDate:");
        panel1.add(lbStartingDate);
        lbStartingDate.setBounds(290,330,125,30);

        txtStartingDate=new JTextField();
        panel1.add(txtStartingDate);
        txtStartingDate.setBounds(370,330,175,30);

        lbLecturerName=new JLabel("LecturerName:");
        panel1.add(lbLecturerName);
        lbLecturerName.setBounds(10,450,125,30);
        
        txtLecturerName=new JTextField();
        panel1.add(txtLecturerName);
        txtLecturerName.setBounds(100,450,155,30);

        
        lbComplete=new JLabel("CompletionDate:");
        panel1.add(lbComplete);
        lbComplete.setBounds(280,390,125,30);


        txtCompletionDate=new JTextField();
        panel1.add(txtCompletionDate);
        txtCompletionDate.setBounds(380,390,155,30);

        JButton btnRegisterAcademic=new JButton("Register");
        btnRegisterAcademic.setBounds(20,510,150,40);
        panel1.add(btnRegisterAcademic);
        btnRegisterAcademic.addActionListener(new ActionListener(){
                public void actionPerformed(ActionEvent ae){
                    regAcademicCourse();
                }
            });

        

        JButton btnDisplayAcademic=new JButton("Display");
        btnDisplayAcademic.setBounds(200,510,150,40);
        panel1.add(btnDisplayAcademic);
        btnDisplayAcademic.addActionListener(new ActionListener(){
        public void actionPerformed(ActionEvent ae){
        displayDetail();
        
    }
          });
        JButton btnClearAcademic=new JButton("Clear");
        btnClearAcademic.setBounds(380,510,150,40);
        panel1.add(btnClearAcademic);
        btnClearAcademic.addActionListener(new ActionListener(){
                public void actionPerformed(ActionEvent ae){
                    clearAcademic();
                }
            });

    }

    public void myFrameB(){
        lbNone= new JLabel("NonAcademicCourse");
        panel2.add(lbNone);
        lbNone.setBounds(490,15,135,40);
        lbNone.setFont(new Font("Verdana",Font.PLAIN,16));

        lbCourse = new JLabel("CourseID:");
        panel2.add(lbCourse);
        lbCourse.setBounds(320,100,125,30);

        txtNonCourseID = new JTextField();
        panel2.add(txtNonCourseID);
        txtNonCourseID.setBounds(400,100,150,35);

        lbCourse = new JLabel("Course Name:");
        panel2.add(lbCourse);
        lbCourse.setBounds(320,145,129,35);

        txtNonCourseName = new JTextField();
        panel2.add(txtNonCourseName);
        txtNonCourseName.setBounds(400,145,150,35);

        lbDuration=new JLabel("Duration:");
        panel2.add(lbDuration);
        lbDuration.setBounds(600,100,129,30);

        txtNonDuration=new JTextField();
        panel2.add(txtNonDuration);
        txtNonDuration.setBounds(655,100,129,35);

        lbPrerequitise=new JLabel("Prerequities:");
        panel2.add(lbPrerequitise);
        lbPrerequitise.setBounds(580,140,129,30);

        txtPrerequitise=new JTextField();
        panel2.add(txtPrerequitise);
        txtPrerequitise.setBounds(655,140,129,35);

        JButton btnAddNonAcademic=new JButton("Add");
        btnAddNonAcademic.setBounds(490,250,150,40);
        panel2.add(btnAddNonAcademic);
        btnAddNonAcademic.addActionListener(new ActionListener()
            {
                public void actionPerformed(ActionEvent ae){
                    addNonAcademicCourse();
                }
            });


        lbCourse=new JLabel("Course ID:");
        panel2.add(lbCourse);
        lbCourse.setBounds(330,350,125,30);

        txtNon1CourseID=new JTextField();
        panel2.add(txtNon1CourseID);
        txtNon1CourseID.setBounds(390,350,145,30);

        lbCourseLeader= new JLabel("CourseLeader:");
        panel2.add(lbCourseLeader);
        lbCourseLeader.setBounds(590,350,125,30);

        txtNonCourseLeader=new JTextField();
        panel2.add(txtNonCourseLeader);
        txtNonCourseLeader.setBounds(690,350,125,35);

        lbInstructor=new JLabel("Instructor Name:");
        panel2.add(lbInstructor);
        lbInstructor.setBounds(310,400,125,30);

        txtInstructor=new JTextField();
        panel2.add(txtInstructor);
        txtInstructor.setBounds(410,400,125,35);

        lbStartingDate=new JLabel("StartDate:");
        panel2.add(lbStartingDate);
        lbStartingDate.setBounds(580,400,125,30);

        txtNonStartingDate=new JTextField();
        panel2.add(txtNonStartingDate);
        txtNonStartingDate.setBounds(650,400,125,35);
        
        lbComplete=new JLabel("Completion Date");
        panel2.add(lbComplete);
        lbComplete.setBounds(550,450,124,30);
        

        txtNonCompletionDate=new JTextField();
        panel2.add(txtNonCompletionDate);
        txtNonCompletionDate.setBounds(650,450,145,30);
        
        lbExamDate=new JLabel("ExamDate");
        panel2.add(lbExamDate);
        lbExamDate.setBounds(310,450,124,30);
        

        txtNonExamDate=new JTextField();
        panel2.add(txtNonExamDate);
        txtNonExamDate.setBounds(390,450,145,30);

        
         lbCourse=new JLabel("CourseID");
        panel2.add(lbCourse);
        lbCourse.setBounds(310,560,124,30);
        

        txtNonCourseID=new JTextField();
        panel2.add(txtNonCourseID);
        txtNonCourseID.setBounds(370,560,145,30);
        
        
        
        JButton btnRegisterNonAcademic=new JButton("Register");
        btnRegisterNonAcademic.setBounds(310,510,135,30);
        panel2.add(btnRegisterNonAcademic);
        btnRegisterNonAcademic.addActionListener(new ActionListener()
            {
                public void actionPerformed(ActionEvent ae){
                    RegisterNonAcademic();
                }
            });


        JButton btnDisplayNonAcademic=new JButton("Display");
        btnDisplayNonAcademic.setBounds(470,510,150,40);
        panel2.add(btnDisplayNonAcademic);
        btnDisplayNonAcademic.addActionListener(new ActionListener()
            {
                public void actionPerformed(ActionEvent ae){
                    DisplayNonAcademic();
                }
            });


        JButton btnClearNonAcademic=new JButton("Clear");
        btnClearNonAcademic.setBounds(650,510,145,30);
        panel2.add(btnClearNonAcademic);
        btnClearNonAcademic.addActionListener(new ActionListener()
            {
                public void actionPerformed(ActionEvent ae){
                    ClearNonAcademic();
                }
            });


        JButton btnRemoveNonAcademic=new JButton("Remove");
        btnRemoveNonAcademic.setBounds(370,600,145,30);
        panel2.add(btnRemoveNonAcademic);
        btnRemoveNonAcademic.addActionListener(new ActionListener()
            {
                public void actionPerformed(ActionEvent ae){
                    RemoveNonAcademic();
                }
            });


    }
    public void addAcademicCourse(){
        String courseId = this.gettxtCourseID();
        String courseName = this.gettxtCourseName();
        int duration = this.gettxtDuration();
        int numberofAssessment = this.gettxtNumberofAssessment();
        String level = this.gettxtLevel();
        String credit=this.gettxtCredit();
        boolean flag = false;
        if(courseId.equals("") || courseName.equals("") || level.equals("")|| duration == -1 || numberofAssessment ==-1 || credit.equals("")){
            JOptionPane.showMessageDialog(frame,"The fields are empty.\nPlease fill the required data","Empty Field",2);
            return;
        }else{
            if(courses.isEmpty()){
                flag = true;
            }
            else{
                for(Course cou : courses){ 
                    if(cou.getCourseID().equals(courses)){ 
                        JOptionPane.showMessageDialog(frame,"The courseid is already added","Repeated Data",2);
                        return;
                    }else{
                        flag = true;
                    }
                }
            }

            if(flag == true){
                courses.add(new AcademicCourse(courseId,courseName,duration,level,credit,numberofAssessment));
                String message = "CourseID: " + courseId + "\nCourseName : " + courseName + "\nDuration : " + duration+ "\nNumberofAssessment : " + 
                    numberofAssessment + "\nLevel : " + level + "\nCredit:"+ credit;
                JOptionPane.showMessageDialog(frame,message,"Data Added",1);
            }
        }
    }

    public void addNonAcademicCourse(){
        String courseId = this.gettxtCourseID();
        String courseName = this.gettxtCourseName();
        int duration = this.gettxtDuration();
        String prerequitise= this. gettxtPrerequitise();
        boolean flag = false;
        if(courseId.equals("") || courseName.equals("") || duration == -1 || prerequitise.equals("")){
            JOptionPane.showMessageDialog(frame,"The fields are empty.\nPlease fill the required data","Empty Field",2);
            return;
        }else{
            if(courses.isEmpty()){
                flag = true;
            }
            else{
                for(Course cou : courses){ 
                    if(cou.getCourseID().equals(courses)){ 
                        JOptionPane.showMessageDialog(frame,"The courseid is already added","Repeated Data",2);
                        return;
                    }else{
                        flag = true;
                    }
                }
            }

            if(flag == true){
                courses.add(new NonAcademicCourse(courseId,courseName,duration,prerequitise));
                String message = "CourseID: " + courseId + "\nCourseName : " + courseName + "\nDuration : " + duration+ "\nprerequitise :" + prerequitise;
                JOptionPane.showMessageDialog(frame,message,"Data Added",1);
            }
        }
    }

    public void regAcademicCourse(){ 
        String courseId = this.gettxtAcaCourseID();
        String courseLeader=this.gettxtCourseLeader();
        String lecturerName=this.gettxtLecturerName();
        String startingDate=this.gettxtStartingDate();
        String complete=this.gettxtCompletionDate();
        boolean flag=false;
        if(courseId.equals("") || startingDate.equals("") || complete.equals("") || courseLeader.equals("") || lecturerName.equals("")){
            JOptionPane.showMessageDialog(frame,"The fields are empty.\nPlease fill the required data","Empty Field",2);
            return;
        }else{
            if(courses.isEmpty()){
                JOptionPane.showMessageDialog(frame,"Please add courses to registered","Registered",1);
                return;
            }
            else{
                for(Course cou : courses){
                    if(cou instanceof AcademicCourse)
                    {
                        if(cou.getCourseID().equals(courseId)){
                            AcademicCourse ad = (AcademicCourse)cou;
                            if(ad.getisRegistered() == true){
                                JOptionPane.showMessageDialog(frame,"This is already registered.","Registered",1);
                                return;
                            }else{
                                ad.register(startingDate,complete,courseLeader,lecturerName);
                                String message = "StartingDate : " + startingDate + "\nCompletionDate : " + complete + "\nCourseLeader: " +courseLeader + "\nlecturer Name : " + lecturerName;
                                JOptionPane.showMessageDialog(frame,"congratulation","Data Added",1);
                            }
                        }else{
                            flag=true;
                            
                        }
                    }
                }
            }
            if(flag==true){
                JOptionPane.showMessageDialog(frame,"the course doesn't exit","incorrect input",2);
                return;
            }
        }
    }

    public void RemoveNonAcademic(){
        String courseid= this.gettxtCourseID();
        if(courses.equals("")){
            JOptionPane.showMessageDialog(frame,"The enter courseid for which you want course to be removed.","Removed",1);
            return;
        }else{
            if(courses.isEmpty()){
                JOptionPane.showMessageDialog(frame,"The addcourse to removed.","Removed",1);
                return;
            }else{
                for(Course cou:courses){
                    if(cou.getCourseID().equals(courses)){
                        if(cou instanceof NonAcademicCourse){
                            NonAcademicCourse ad = (NonAcademicCourse) cou;
                            if(ad.getisRemove() == false){
                                ad.remove();
                                JOptionPane.showMessageDialog(frame,"The course is removed","Removed",1);
                            }else{
                                JOptionPane.showMessageDialog(frame,"The course is already removed","Removed",1);
                                return;
                            }
                        }
                    }else{
                        JOptionPane.showMessageDialog(frame,"The entered course cannot be removed as it does not exist.","Removed",1);
                        return;
                    }
                }

            }
        }
    }

    public void clearAcademic() {
        
        txtCourseID.setText("");
        txtacaCourseID.setText("");
        txtCourseLeader.setText("");
        txtLecturerName.setText("");
        txtCourseName.setText("");
        txtLevel.setText("");
        txtCredit.setText("");
        txtNumberofAssessment.setText("");
        txtDuration.setText("");
        txtStartingDate.setText("");
        txtCompletionDate.setText("");
        
        
    }
        

    
     public void displayDetail(){
        int count=0;
        if(courses.isEmpty()){
            count = 0;
        }else{
            for(Course cou : courses){
                if(cou instanceof AcademicCourse){
                    AcademicCourse ad = (AcademicCourse) cou;
                    ad.displayDetail();
                    count++;
               }
            }
               
            if(count==0){
                JOptionPane.showMessageDialog(panel1,"The add Academic Course to display.","Display",1);
                return;
            }
        }
    }
   
    public void DisplayNonAcademic(){
        if(courses.isEmpty()){
            JOptionPane.showMessageDialog(frame,"please add Courses","Display",1);
            return;
        }
        else{
            for(Course cou:courses){
                NonAcademiccourse nc=(NonAcademicCourse)cou;
                if(cou instanceof NonAcademicCourse){
                    nc.displayDetail();
                }
            }
        }
        
    }
   
    public void RegisterNonAcademic(){
        
    }
    public static void main(String [] args){
        new INGCollege().frame.setVisible(true);
    }
}